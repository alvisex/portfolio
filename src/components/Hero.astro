<section class="flex md:items-center bg-transparent h-[80vh] md:h-screen relative" id="hero">
  <div class="container mt-32 md:mt-0 md:px-12">
    <div class="relative txt-hero">
      <h2 class="text-5xl md:text-6xl">
        <span><span class="text-gradient short">Alvise</span> Leal</span>
      </h2>
      <h1 class="text-6xl md:text-8xl my-4 md:my-6 font-black text-primary">Web Engineer</h1>
      <span class="text-[1.42rem] md:text-3xl span1">Full-Stack capabilities,</span>
      <span class="text-[1.42rem] md:text-3xl span2">
        <span class="text-gradient short"> Frontend</span> expertise
      </span>
    </div>
  </div>
  <div class="blob-cont">
    <div class="yellow blob"></div>
    <div class="red blob"></div>
    <div class="green blob"></div>
    <div class="bg-citelis"></div>
    <div class="bg-gitlab"></div>
    <div class="bg-clout"></div>
  </div>
</section>

<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'
  gsap.registerPlugin(ScrollTrigger)
  /* hero */

  const q = gsap.utils.selector('#hero')
  gsap
    .timeline({ defaults: { duration: 1.7, ease: 'power2' } })
    .from(q('h2'), { y: '50%', clipPath: 'inset(0 0 100% 0)', opacity: 0 })
    .from(q('h1'), { y: '50%', clipPath: 'inset(0 0 100% 0)', opacity: 0 }, '-=1.1')
    .from('.span1', { opacity: 0 }, '-=0.5')
    .from('.span2', { opacity: 0 }, '-=0.8')

  gsap
    .timeline({
      scrollTrigger: {
        trigger: '#hero',
        start: 'center center',
        end: 'bottom 30%',
        scrub: true,
      },
      defaults: { ease: 'none' },
    })
    .to('.blob-cont', { objectPosition: '40% 0%' })
    .to('.txt-hero', { yPercent: 50 }, 0)
</script>

<style>
  :root {
    --bg: #080808;
    --text: #ece8e8;
    --yellow: #7259ad;
    --red: #a85c9e;
    --green: #7ab9ac;

    --size: min(200px, 20vw);
    --size-2: min(250px, 20vw);
  }

  h1 {
    line-height: 1.4;
  }
  /* Blobs */
  .blob-cont {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: -2;
    height: 100%;
    width: min(700px, 100%);
    top: 0;
    right: 5em;
  }

  .blob {
    border-radius: 100px;
    filter: blur(60px);
    will-change: transform;
  }

  .yellow {
    background-color: var(--accent);
    position: absolute;
    top: 200px;
    left: 100px;
    height: var(--size);
    width: var(--size);

    animation: yellow 8s infinite ease;
  }

  .green {
    background-color: var(--primary);
    position: absolute;
    top: 80px;
    right: -20px;
    height: var(--size);
    width: var(--size-2);

    animation: green 8s infinite ease;
  }

  .red {
    background-color: var(--red);
    position: absolute;
    right: 0;
    top: 300px;
    height: var(--size-2);
    width: var(--size);

    animation: red 8s infinite linear;
  }

  @keyframes yellow {
    0% {
      transform: scale(1) translate(0, 0);
    }
    30% {
      transform: scale(1.2) translate(100px, -50px);
    }
    60% {
      transform: scale(1.3) translate(-100px, 100px);
    }
    100% {
      transform: scale(1) translate(-0, 0);
    }
  }

  @keyframes green {
    0% {
      transform: scale(1.2) translate(0, 0);
    }
    30% {
      transform: scale(1) translate(0, 220px);
    }
    60% {
      transform: scale(1) translate(-120px, 120px);
    }
    100% {
      transform: scale(1.2) translate(-0, 0);
    }
  }

  @keyframes red {
    0% {
      transform: scale(1) translate(0, 0);
    }
    30% {
      transform: scale(1.4) translate(-50px, -150px);
    }
    60% {
      transform: scale(1) translate(-100px, 100px);
    }
    100% {
      transform: scale(1.1) translate(-0, 0);
    }
  }
</style>
