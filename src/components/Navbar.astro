---
const links = [
  { href: 'mailto:alvise.ld@gmail.com?subject=Portfolio%20contact', icon: '/mail-icon.svg', text: 'Contact', altText: 'Email icon' },
  /*   { href: '/portfolio', icon: '/portfolio.svg', text: 'Portfolio' }, */
  /*  { href: '/demo', icon: '/cube.svg', text: 'Demo' }, */
  { href: 'https://linkedin.com/in/alvise-leal', icon: '/linkedin.svg', text: 'LinkedIn', altText: 'LinkedIn icon', target: '_blank' },
]
---

<nav class="z-40 w-full fixed bg-gradient-to-b from-gray-950 h-14">
  <div class="container flex justify-between py-4">
    <div class="flex">
      <div class="flex overflow-hidden">
        <a href="/" id="txt-1">
          <span class="text-gradient short">Alvise</span> Leal
        </a>
      </div>
      <span class="text-gradient short mx-2" id="divider"> |</span>
      <div class="flex overflow-hidden">
        <span id="txt-2"> Web Engineer</span>
      </div>
    </div>
    <ul class="justify-between gap-8 md:flex hidden">
      {
        links.map((item) => (
          <li class="nav-item">
            <a class="nav-link" href={item.href} target={item.target || '_self'}>
              {item.icon && <img src={item.icon} alt={item.altText} />}
              <span>{item.text}</span>
            </a>
          </li>
        ))
      }
    </ul>
    <!-- <button class="md:hidden" data-drawer-target="drawer" data-drawer-show="drawer" data-drawer-placement="right" aria-controls="drawer">
      <svg width="30px" height="30px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M4 6H20M4 12H20M4 18H20" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
    </button> -->
  </div>
</nav>

<div id="drawer" class="d-hidden glassy fixed top-0 right-0 z-40 h-screen p-4 w-1/2" tabindex="-1">
  <button
    type="button"
    data-state="closed"
    aria-controls="drawer"
    aria-expanded="false"
    id="drawer-toggle"
    class="text-gray-200 text-sm w-8 h-8 fixed top-2.5 inline-flex items-center justify-center md:hidden"
  >
    <svg fill="rgb(229 231 235)" class="hamburger" viewBox="0 0 100 100">
      <rect class="line top" width="80" height="10" x="10" y="25" rx="5"> </rect>
      <rect class="line middle" width="80" height="10" x="10" y="45" rx="5"> </rect>
      <rect class="line bottom" width="80" height="10" x="10" y="65" rx="5"> </rect>
    </svg>
    <span class="sr-only">Toggle menu</span>
  </button>

  <ul class="justify-between gap-8 grid col-span-1 pt-12">
    {
      links.map((item) => (
        <li class="nav-item">
          <a class="nav-link" href={item.href} target={item.target || '_self'}>
            {item.icon && <img src={item.icon} alt={item.altText} />}
            <span>{item.text}</span>
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
  const btnToggle = document.getElementById('drawer-toggle')
  const drawer = document.getElementById('drawer')

  btnToggle?.addEventListener('click', () => {
    drawer.classList.toggle('d-hidden')
    const currentState = btnToggle.getAttribute('data-state')
    if (!currentState || currentState === 'closed') {
      btnToggle.setAttribute('data-state', 'opened')
      btnToggle.setAttribute('aria-expanded', 'true')
    } else {
      btnToggle.setAttribute('data-state', 'closed')
      btnToggle.setAttribute('aria-expanded', 'false')
    }
  })
</script>

<style>
  .nav-link {
    @apply flex items-center gap-2;
  }
  img {
    width: 1.3rem;
  }
  #drawer {
    transition: transform 500ms ease;
    &.d-hidden {
      transform: translateX(100%);

      #drawer-toggle {
        transition: transform 500ms ease;
        transform: translateX(-200%);
      }
    }
  }
  #drawer-toggle {
    --line-anim-speed: 200ms;
    transform: translateX(30vw);
    transition: transform 500ms ease;

    .line {
      transition:
        y var(--line-anim-speed) ease-in var(--line-anim-speed),
        rotate var(--line-anim-speed) ease-in,
        opacity 0ms var(--line-anim-speed);
      transform-origin: center;
    }

    &[aria-expanded='true'] {
      & .line {
        transition:
          y var(--line-anim-speed) ease-in,
          rotate var(--line-anim-speed) ease-in var(--line-anim-speed),
          opacity 0ms var(--line-anim-speed);
      }

      & :is(.top, .bottom) {
        y: 45;
      }

      & .top {
        rotate: 45deg;
      }

      & .middle {
        opacity: 0;
      }

      & .bottom {
        rotate: -45deg;
      }
    }
  }
  .glassy {
    /* From https://css.glass */
    background: rgba(65, 116, 136, 0.226);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(7px);
    border: 1px solid rgba(175, 211, 225, 0.33);
  }
</style>
