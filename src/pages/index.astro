---
import Layout from '../layouts/Layout.astro'
import Card from '../components/Card.astro'
import Avatar from '../components/Avatar.astro'
import Hero from '../components/Hero.astro'
import Skills from '../components/Skills.vue'
import TheExperience from '../components/TheExperience.vue'
import Experience from '../components/Experience.astro'
---

<Layout title="Web Engineer">
  <main>
    <div class="bg-cards"></div>
    <Hero />

    <TheExperience client:load />
    <section class="flex items-center card" data-model>
      <Card title="" header="Who I am?">
        <p class="visually-hidden">
          A Web Engineer with <strong>5+ years</strong>
          of experience developing outstanding interfaces and seamless solutions through web technologies.
        </p>
        <p aria-hidden="true">
          <span>A</span>
          <span>Web</span>
          <span>Engineer</span>
          <span>with</span>
          <span class="text-accent">5+</span>
          <span class="text-accent">years</span>
          <span>of</span>
          <span>experience</span>
          <span>developing</span>
          <span>outstanding</span>
          <span>interfaces</span>
          <span>and</span>
          <span>seamless</span>
          <span>solutions</span>
          <span>through</span>
          <span>web</span>
          <span>technologies.</span>
        </p>
        <!--  <p>
          I've worked in varity of environments, since the one-man department to be part of a team from a world-wide company. Always
          learning what the situation required, be adaptative and proactive to achieve the goal is my hallmark.
        </p> -->
      </Card>
    </section>

    <section class="flex items-center card" data-model>
      <Card title="" header="Excelled as a frontend" reversed>
        <!-- <p>
          <span>I've worked in varity of</span>
          <span>environments, since the one-man</span>
          <span>department to be part</span>
          <span>of a team from a world-wide</span>
          <span>company.</span>
        </p> -->
        <!-- Throughout my career, I excelled as a frontend,  -->
        <p class="visually-hidden">
          Also cooperating with UI/UX, DB admin, Backend, and DevOps duties across various environment, from solo department to global
          teams.
        </p>
        <p aria-hidden="true">
          <span>Also</span>
          <span>cooperating</span>
          <span>with</span>
          <span>UI/UX,</span>
          <span>DB,</span>
          <span>admin,</span>
          <span>Backend,</span>
          <span>and</span>
          <span>DevOps</span>
          <span>duties</span>
          <span>across</span>
          <span>various</span>
          <span>environment,</span>
          <span>from</span>
          <span>solo</span>
          <span>department</span>
          <span>to</span>
          <span>global</span>
          <span>teams.</span>
        </p>
      </Card>
    </section>

    <section class="flex items-center card" data-model>
      <Card title="" header="My nature">
        <!-- <p>I continuously seek out the best technologies, processes, and strategies to achieve goals.</p> -->
        <p class="visually-hidden">
          Continuously on the lookout for fresh technologies, tools and strategies to achieve the goals simplifying processes and optimizing
          efforts
        </p>
        <p aria-hidden="true">
          <span>Continuously</span>
          <span>on</span>
          <span>the</span>
          <span>lookout</span>
          <span>for</span>
          <span>fresh</span>
          <span>technologies,</span>
          <span>tools</span>
          <span>and</span>
          <span>strategies</span>
          <span>to</span>
          <span>achieve</span>
          <span>the</span>
          <span>goals</span>
          <span>simplifying</span>
          <span>processes</span>
          <span>and</span>
          <span>optimizing</span>
          <span>efforts</span>
        </p>

        <!-- <p>I drive the blooming of the idea toward a beautiful yet effective solution.</p> -->
      </Card>
    </section>

    <div class="h-20 md:h-[80vh]" data-model data-end-mark="140%"></div>
    <section class="h-[400vh] carousel-section overflow-x-hidden" id="skills">
      <Skills client:load />
    </section>

    <section class="min-h-screen relative py-8" id="experience">
      <h2 class="text-center font-black text-5xl md:text-6xl text-gradient mx-auto mb-8">EXPERIENCE</h2>

      <Experience />
    </section>
  </main>
</Layout>

<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'
  gsap.registerPlugin(ScrollTrigger)

  /* Lenis compatibility */
  import Lenis from '@studio-freight/lenis'
  const lenis = new Lenis()
  lenis.on('scroll', ScrollTrigger.update)
  gsap.ticker.add((time) => {
    lenis.raf(time * 1000)
  })
  gsap.ticker.lagSmoothing(0)

  const backgrounds = [
    'linear-gradient( 180.7deg, #0000 10.7%, rgba(53,92,125,0) 100%)',
    'linear-gradient( 180.7deg,  #151616 10.7%, rgba(53,92,125,1) 88.8% )',
    'linear-gradient( 89.7deg, #151616 -10.7%, rgba(53,92,125,1) 80.8% )',
    'linear-gradient( 9.7deg, #151616 -20.7%,   rgba(43,123,79,1) 80.8% )',
    'linear-gradient( 0deg, #151616 0%, rgba(53,92,125,1) 80.8% )',
    'linear-gradient( 45deg, #151616 0%, rgba(113,32,25,1) 80.8% )',
  ]

  const bgAnimation = (index: number) => {
    gsap.to('.bg-cards', {
      background: backgrounds[index],
      duration: 1.2,
      ease: 'power3',
    })
  }

  gsap.set('.bg-cards', { background: 'linear-gradient( 180.7deg,  var(--background) 10.7%, rgba(53,92,125,0) 10)' })

  /* Sections */
  let sections: Element[] = gsap.utils.toArray('section:not(.hero)')
  sections.forEach((section, index) => {
    /* bg animations */
    let trigger = ScrollTrigger.create({
      trigger: section,
      start: 'top 30%',
      end: 'bottom 30%',
      //markers: true,
      onEnter() {
        bgAnimation(index)
      },
      onEnterBack() {
        bgAnimation(index)
      },
    })

    //let q = gsap.utils.selector(section)
  })

  let mm = gsap.matchMedia(),
    breakPoint = 800

  const cards: Element[] = gsap.utils.toArray('.card')
  cards.forEach((card: Element) => {
    let q = gsap.utils.selector(card)

    mm.add(
      {
        // set up any number of arbitrarily-named conditions. The function below will be called when ANY of them match.
        isDesktop: `(min-width: ${breakPoint}px)`,
        isMobile: `(max-width: ${breakPoint - 1}px)`,
      },
      (context) => {
        // context.conditions has a boolean property for each condition defined above indicating if it's matched or not.
        let { isDesktop, isMobile, reduceMotion } = context.conditions

        const triggerLine = isDesktop ? '30%' : '10%'
        gsap.timeline({
          scrollTrigger: {
            trigger: q('.card-text'),
            pin: card,
            //markers: true,
            start: `top ${triggerLine}`,
            end: `bottom ${triggerLine}`,
          },
        })
      }
    )

    let spanes: Element[] = gsap.utils.toArray(q('p>span'))
    spanes.forEach((target, index) => {
      gsap.from(target, {
        opacity: 0,
        ease: 'none',
        duration: 0.3,
        scrollTrigger: {
          trigger: target,
          //markers: true,
          toggleActions: 'play none none reverse',
          start: `${index * 20}px 60% `,
          end: `${index * 20 + 20}px 60%`,
        },
      })
    })
    //
  })
</script>

<style lang="scss">
  :root {
    --card-bg-1: rgba(53, 92, 125, 1);
  }
  .cards-wrapper {
    position: relative;
  }
  .bg-cards {
    height: 100vh;
    width: 100%;
    background: linear-gradient(180.7deg, #0000 10.7%, rgba(53, 92, 125, 0) 20);
    position: fixed;
    top: 0;
  }
  /* p {
    @apply mb-4;
  } */

  strong {
    @apply text-accent;
  }
</style>
